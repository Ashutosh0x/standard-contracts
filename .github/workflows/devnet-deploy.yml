name: Solana Devnet Build & Deploy

on:
  workflow_dispatch:
  push:
    branches:
      - feat/universal-nft-solana

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      ANCHOR_PROVIDER_URL: https://api.devnet.solana.com
      ANCHOR_WALLET: ${{ github.workspace }}/id.json

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Write Solana wallet from secret
        shell: bash
        run: |
          echo '${{ secrets.SOLANA_WALLET_KEY }}' > $ANCHOR_WALLET
          chmod 600 $ANCHOR_WALLET

      - name: Install Rust 1.79
        shell: bash
        run: |
          rustup install 1.79.0
          rustup override set 1.79.0
          rustc --version
          cargo --version

      - name: Install Solana toolchain (bundles Rust >=1.79 for SBF)
        shell: bash
        run: |
          sudo apt-get update -y && sudo apt-get install -y curl ca-certificates tar bzip2
          set -euo pipefail
          TARBALL=/tmp/solana-release.tar.bz2
          DEST_BASE="$HOME/.local/share/solana/install/releases"
          mkdir -p "$DEST_BASE"
          # Try a list of known 1.18.x versions (preferring newest first)
          for SOLANA_VER in v1.18.33 v1.18.32 v1.18.31 v1.18.30 v1.18.26; do
            echo "Attempting Solana $SOLANA_VER"
            DEST="$DEST_BASE/${SOLANA_VER#v}"
            mkdir -p "$DEST"
            if curl -fL --retry 5 --retry-delay 2 --connect-timeout 20 --max-time 600 \
                 https://github.com/solana-labs/solana/releases/download/$SOLANA_VER/solana-release-x86_64-unknown-linux-gnu.tar.bz2 -o "$TARBALL"; then
              true
            else
              if ! curl -fL --retry 5 --retry-delay 2 --connect-timeout 20 --max-time 600 \
                   https://release.solana.com/$SOLANA_VER/solana-release-x86_64-unknown-linux-gnu.tar.bz2 -o "$TARBALL"; then
                echo "Failed to download for $SOLANA_VER, trying next" >&2
                rm -f "$TARBALL"
                rmdir "$DEST" || true
                continue
              fi
            fi
            # Validate and extract
            if tar -tjf "$TARBALL" >/dev/null 2>&1; then
              tar -xjf "$TARBALL" -C "$DEST"
              ln -sfn "$DEST" "$HOME/.local/share/solana/install/active_release"
              break
            else
              echo "Tarball invalid for $SOLANA_VER, trying next" >&2
              rm -f "$TARBALL"
              rmdir "$DEST" || true
            fi
          done
          # Ensure binaries on PATH
          echo "$HOME/.local/share/solana/install/active_release/solana-release/bin" >> $GITHUB_PATH
          solana --version || true
          cargo-build-sbf --version || true

      - name: Create wallet if secret not provided
        shell: bash
        run: |
          if [ ! -s "$ANCHOR_WALLET" ]; then
            echo "No SOLANA_WALLET_KEY secret provided; generating ephemeral devnet keypair"
            solana-keygen new --no-bip39-passphrase --outfile "$ANCHOR_WALLET" --force
            chmod 600 "$ANCHOR_WALLET"
          fi
          solana config set --url https://api.devnet.solana.com >/dev/null 2>&1 || true
          solana address -k "$ANCHOR_WALLET"

      - name: Install Anchor CLI
        shell: bash
        run: |
          cargo install --git https://github.com/coral-xyz/anchor anchor-cli --locked
          anchor --version

      - name: Ensure Docker available for Anchor build
        shell: bash
        run: |
          docker --version

      - name: Clean previous builds
        working-directory: protocol-contracts-solana
        shell: bash
        run: anchor clean

      - name: Build Solana program (Rust 1.79)
        working-directory: protocol-contracts-solana
        shell: bash
        run: |
          anchor --version
          docker --version
          # Build inside Anchor's Docker image to avoid host toolchain mismatch
          anchor clean
          anchor build

      - name: List deploy artifacts
        working-directory: protocol-contracts-solana
        shell: bash
        run: ls -l target/deploy || true

      - name: Deploy to Devnet
        working-directory: protocol-contracts-solana
        shell: bash
        run: anchor deploy --provider.cluster devnet

      - name: Print deployed program address
        working-directory: protocol-contracts-solana
        shell: bash
        run: solana address -k target/deploy/universal_nft-keypair.json

      - name: Upload program artifact
        uses: actions/upload-artifact@v4
        with:
          name: universal_nft_artifacts
          path: |
            protocol-contracts-solana/target/deploy/universal_nft.so
            protocol-contracts-solana/target/deploy/universal_nft-keypair.json
          if-no-files-found: warn


